#!/usr/bin/env perl
#
# Charcoal - URL Re-Director/Re-writer Server for Squid
# Copyright (C) 2012 Unmukti Technology Pvt Ltd <info@unmukti.in>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111, USA.

package charcoal_server;

$| = 1;

#use warnings;

use strict;
use Cwd;
use DBI;
use DBD::Pg;
die "This program requires DBD::Pg version >= 3.6.2" unless $DBD::Pg::VERSION >= 3.6.2;
use JSON::XS;
use NetAddr::IP;
use URI::Split qw(uri_split);
use Cache::Memcached::Fast;


# Set or unset DEBUG mode
my $DEBUG = 1;

# Set CACHE var to 0. If found in cache, update it to 1
my $CACHE = 0;

# The AutoCommit attribute should always be explicitly set
use DBD::Pg qw(:pg_types :async);

#my $pgdbhost = 'localhost';
my $pgdbhost = '10.28.0.1';
my $pgdbname = 'charcoaldb';
my $pgdbuser = 'charcoal';
my $pgdbpass = 'charcoa1pa55';
my $pgdbport = 5432;

our ($memd, $dbh);

connect_cache();

use base qw(Net::Server::Fork);

my $server = __PACKAGE__->new({
                    'log_level'   =>  4,
                    'log_file'    => 'Sys::Syslog',
                    'syslog_ident'=> 'charcoal-server',
                    'port'        =>  6603,
                    'ipv'         =>  4,
                    'proto'       =>  'tcp',
                    'user'        =>  'nobody',
                    'group'       =>  'nogroup',
                });

print STDERR "Accepting connections on port 6603...\n";
$server->run;

sub process_request {

    my $self = shift;

    eval {

        local $SIG{'ALRM'} = sub { die "Timed Out!\n" };
        my $timeout = 300;

        my $previous_alarm = alarm($timeout);

        while (<STDIN>){
            s/\r?\n$//;
            print STDERR "MAIN: Sending for check_acl\n" if $DEBUG;
            my $allowdeny = check_acl($_);
            print STDOUT $allowdeny . "\r\n";
            $allowdeny = "2OK" if (!$allowdeny);# Set to 2OK for squid 2
            $memd->set($_, $allowdeny, 600) if ($CACHE != 1);# Set key-value in memcached
            print STDERR "MAIN: Returned from check_acl - allowdeny is $allowdeny " if $DEBUG;
            print STDERR "CACHE is $CACHE\n" if $DEBUG;
        #    $self->disconnect;
            alarm($timeout);
        }

        alarm($previous_alarm);
    };

    if ($@ =~ /timed out/i){
        print STDOUT "Timed Out.\r\n";
        return;
    }
}

sub post_accept_hook {
    connect_db();
}


sub post_process_request {
    print STDERR "Disconnecting from DB\n" if $DEBUG;
    $dbh->disconnect;
}


sub connect_cache {
    print STDERR "Connecting to memcached...\n";
    $memd = new Cache::Memcached::Fast({
            servers         => [{ address => 'localhost:11211'}],
            namespace       => 'charcoal:',
            connect_timeout => 0.2,
            io_timeout      => 0.5,
            close_on_error  => 1,
            max_failures    => 3,
            failure_timeout => 2,
            ketama_points   => 150,
            hash_namespace => 1,
            serialize_methods => [ \&Storable::freeze, \&Storable::thaw ],
            utf8 => ($^V ge v5.8.1 ? 1 : 0),
            max_size => 512 * 1024,
        });
}

sub connect_db {

    my $self = shift;

    print STDERR "Connecting to database $pgdbname on $pgdbhost:$pgdbport...\n" if $DEBUG;

    ### Get PG DB Connection
    $dbh = DBI->connect("dbi:Pg:dbname=$pgdbname;host=$pgdbhost;port=$pgdbport;", $pgdbuser, $pgdbpass, {AutoCommit => 1, RaiseError => 1, InactiveDestroy => 1});

#    return $dbh;

}
 
sub check_acl {

    my $msg = shift;
    print STDERR "Got MSG: " . $msg . "\n" if $DEBUG;

    print STDERR "Checking the memcached\n" if $DEBUG;
    my $cres = $memd->get($msg);
    if ($cres){
        print STDERR "FOUND in memcached: $cres\n" if $DEBUG;
    print STDERR "CACHE is set to: 1\n" if $DEBUG;
        $cres = "" if $cres eq '2OK';
    $CACHE = 1;
        return $cres;
    }

    my %access_hash;

    my ($api, $squidver, $srcip, $ident, $method, $blah, $url) = split(/\|/, $msg);

    $srcip =~ s/\/.*$//;

    my $sql = qq{ SELECT id FROM customers where api = ? };
    my $sth = $dbh->prepare($sql);
    $sth->execute($api);

    my ($customer, $custid);
    $sth->bind_columns(\$customer);
    while ($sth->fetch){
            print STDERR "{$api} CUST ID: $customer\n" if $DEBUG;
            $custid = $customer;
    }
    $sth->finish;

    print STDERR "{$api} Customer ID for API Key \'$api\': $custid\n" if $DEBUG;
    if (!$custid){
        print STDERR "{$api} Invalid API Key. Returning\n";
        return ("BH message=Invalid API Key\r\n");
    }

## Get the default access rule

    my $ACCESS = 0; # DEFAULT ACCESS IS TO DENY ALL

    my $sql = qq {SELECT seq AS seq, acl::jsonb#>>'{access}' AS access from 
                acls where customer = ? and acl::jsonb#>'{src}' \\? '0' 
                and acl::jsonb#>'{dst}' \\? '0' order by seq desc limit 1} ;

    print STDERR "{$api} QUERY IS: $sql\n" if $DEBUG;
    $sth = $dbh->prepare($sql);

    $sth->execute($custid);

    my ($seq, $result, $def_seq);

    $sth->bind_columns(\$seq, \$result);

    while($sth->fetch()){
        print STDERR "{$api} >>>> Got default access at seq $seq as $result\n" if $DEBUG;
    $access_hash{$seq} = $result;
    $def_seq = $seq;
    }

    $ACCESS = 1 if $result eq "ALLOW";
    $ACCESS = 0 if $result eq "DENY";
    
    print STDERR "{$api} **** DEF SEQ is $def_seq\n" if $DEBUG;
    print STDERR "{$api} **** ACCESS is now $ACCESS\n" if $DEBUG;


    my ($scheme, $domain, $path, $query, $frag) = uri_split($url);
    print STDERR "{$api} URI_SPLIT: $scheme, $domain, $path, $query, $frag\n" if $DEBUG;
    my $dst = $domain || $scheme;
    my $displaydst = $dst;

    if ($dst =~ /hopbox\.in/){
        return "OK\r\n" if $squidver == 3;
        return;
    }
    
    
    ### USE NetAddr::IP module - $ip->within()
    ## Get the group IDs of the SRC for CUST
    # 1. Check all the "src" for the customer with type "ip"
    # 2. Check all the "src" for the customer with type "iprange"
    # 3. Check all the "src" for the customer with type "network"
    # 4. Check all the "src" for the customer with type "user"
    ## Get the group IDs for each of the matching "src"
    # Return

    
    print STDERR "{$api} Getting src_groups for the src: $custid, $srcip, $ident\n" if $DEBUG;
    
    my @src_grp;
    
    $sql = qq/ SELECT id,value FROM src WHERE customer = ? AND src_type in (2, 3, 4) /;
    $sth = $dbh->prepare($sql);
    $sth->execute($custid);
    
    my $src_ip_obj = NetAddr::IP->new($srcip);
    
    my ($src_id, $db_src, %srchash, @src_values, $src_group_id);
    
    $sth->bind_columns(\$src_id, \$db_src);
    
    while ($sth->fetch()){
    
        print STDERR "{$api} Checking if $srcip lies within/matches $db_src.\n" if $DEBUG;
    
        if ( $src_ip_obj->within ( NetAddr::IP->new( $db_src ) ) ){
            my $sql = qq / SELECT grp FROM src_groups WHERE member = ? /;
            my $sth = $dbh->prepare($sql);
            $sth->execute("$src_id");
            $sth->bind_columns(\$src_group_id);
    
            while ($sth->fetch()){
                print STDERR "{$api} Adding $src_group_id to src_group list for $db_src/$srcip\n" if $DEBUG;
                push @src_grp, $src_group_id;
            }
            $sth->finish;
    
        }
    
    }
    $sth->finish;
    
    if ($ident ne '-'){
        $sql = qq/ SELECT src_groups.grp from src, src_groups WHERE src.customer = ? AND src.value = ? AND src_groups.member = src.id /;
        $sth = $dbh->prepare($sql);
        $sth->execute($custid, $ident);
    
        $sth->bind_columns(\$src_group_id);
        while ($sth->fetch()){
            push @src_grp, $src_group_id;
        }
        $sth->finish;
    }
    
    
    
    my ($srcstring, $dststring);
    my $src_grp_count = $#src_grp + 1;
    
    if ($src_grp_count){
        foreach (@src_grp){
            $_ = "\'$_\'";
            print STDERR "{$api} Source group $_\n" if $DEBUG;
            $srcstring = join (',', $srcstring, $_);
        }
    }
    else{
        $srcstring = "\'0\'";
    }
    
    $srcstring =~ s/^,//;

    while ($dst) {
        print STDERR "{$api} #### Getting categories for destination $dst.\n" if $DEBUG;
    
        my $glsql = qq{ SELECT category FROM gl_dom_cat WHERE domain IN (SELECT id FROM domains WHERE domain = ?) };
        my $csql = qq { SELECT category FROM c_dom_cat WHERE domain IN (SELECT id FROM c_domains WHERE customer = ? and domain = ?)};
    
        $sth = $dbh->prepare($glsql);
        my ($category, @categories);
        $sth->execute($dst);
        $sth->bind_columns(\$category);
        while ($sth->fetch()){
            print STDERR "{$api} Found global category $category for destination $dst\n" if $DEBUG;
            push @categories, $category;
        }
    
        $sth->finish;
    
        $sth = $dbh->prepare($csql);
        $sth->execute($custid, $dst);
        $sth->bind_columns(\$category);
        while ($sth->fetch()){
            print STDERR "{$api} Found customer category $category for destination $dst\n" if $DEBUG;
            push @categories, $category;
        }   
    
        $sth->finish;
    
        print STDERR "{$api} Categories: @categories \n" if $DEBUG;
    
    
    # Get all the rules which have SRC -> 0 (ALL) & DST -> 0 or request DST
        undef $sql; undef $sth;
        $sql =   "SELECT seq AS seq, acl::jsonb#>>'{access}' AS access from acls where \
                    customer = ? and seq != ?";
                    #and seq != 99999 ";
    

        my $cat_count = $#categories + 1;
    
        print STDERR "{$api} Source Group Count: $src_grp_count Categories Count: $cat_count \n" if $DEBUG;

        if (!$src_grp_count && !$cat_count){
            print STDERR "{$api} src & cat both are ZERO. No point in querying. NEXT\n" if $DEBUG;
            $dst = "" if $dst !~ /\.(.*)$/; ## If dst doesn't contain a "." followed by something, make it null and exit;
            $dst =~ s/^.*?\.(.*)/$1/; ## chop first sub-domain part from left
            print STDERR "{$api} >>>> Rewrote dst to $dst <<<< \n" if $DEBUG;
            next;
        }
    
    
        $sql = $sql . " and ((acl::jsonb#>\'{src}\' \\?| array[$srcstring] ";
    
        if ($cat_count){
            foreach (@categories){
                $_ = "\'$_\'";
                print STDERR "{$api} Destination category $_\n" if $DEBUG;
                $dststring = join (',', $dststring, $_);
            }
        }
        
        else{
            $dststring = "\'0\'";
        }

        $dststring =~ s/^,//;
    
        $sql = $sql . " and acl::jsonb#>\'{dst}\' \\?| array[$dststring] )";
        $sql = $sql . " OR (acl::jsonb#>\'{src}\' \\?| array['0'] and acl::jsonb#>\'{dst}\' \\?| array[$dststring])";
        $sql = $sql . " OR (acl::jsonb#>\'{src}\' \\?| array[$srcstring] and acl::jsonb#>\'{dst}\' \\?| array['0'])";
        $sql = $sql . " ) ";
    
        $sql = $sql . ' order by seq asc';
           
        print STDERR "{$api} Getting rules with srcstring $srcstring and dststring $dststring\n" if $DEBUG;
        print STDERR "{$api} Query is: $sql\n" if $DEBUG;
    
        $sth = $dbh->prepare($sql);
        $sth->execute($custid, $def_seq);
    
        my @rules;
        undef $seq; undef $result;
        $sth->bind_columns(\$seq, \$result);
        while ($sth->fetch()){
            print STDERR "{$api} >>>> Got rule seq: $seq and access: $result\n" if $DEBUG;
#             next if $seq == 99999;    
            next if $seq == $def_seq;
            $access_hash{$seq} = $result;
        }
        $sth->finish;
        $ACCESS = 1 if $result eq "ALLOW";
        $ACCESS = 0 if $result eq "DENY";
        
        print STDERR "{$api} Access is now $ACCESS\n";

        $dst = "" if $dst !~ /\.(.*)$/; ## If dst doesn't contain a "." followed by something, make it null and exit;
        $dst =~ s/^.*?\.(.*)/$1/; ## chop first sub-domain part from left
        print STDERR "{$api} >>>> Rewrote dst to $dst <<<< \n" if $DEBUG;
    
    }

    for my $key ( sort {$a<=>$b} keys %access_hash ){
        print STDERR "{$api} ***** Seq $key: $access_hash{$key}\n" if $DEBUG;
    }
    my $effective_rule_key = (sort {$a<=>$b} keys %access_hash)[0];

    $ACCESS = $access_hash{$effective_rule_key};

        print STDERR "{$api} **** Access is now $ACCESS - out of WHILE DST loop\n" if $DEBUG;

#    return "You said $msg\r\n";
    if ($ACCESS == 1 or $ACCESS eq "ALLOW"){
        print STDERR "{$api} Returning to main loop, with ACCESS ALLOW (squid version is $squidver)\n" if $DEBUG;
        return "OK\r\n" if $squidver == 3;
        return;
    }
    else{
        my $redir;
        $redir = "http://hopbox.in/cgi-bin/blockmsg.cgi?url=$displaydst&clientaddr=$srcip&clientuser=$ident" if ($scheme eq 'http');
        $redir = "https://hopbox.in/cgi-bin/blockmsg.cgi?url=$displaydst&clientaddr=$srcip&clientuser=$ident" if ($path eq '443');
        print STDERR "{$api} Returning to main loop, with ACCESS DENY (squid version is $squidver)\n" if $DEBUG;
        return "OK status=302 url=\"$redir\"" if $squidver == 3;
        return "302:$redir" if $squidver == 2;
    }

    print STDERR "{$api} End of check_acl subroutine\n" if $DEBUG;

}

sub check_times {

    my $dbh  = shift;
    my $time = shift;

}

1;
